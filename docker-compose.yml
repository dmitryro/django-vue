version: '3.7'


services:
  db:
    container_name: ${PROJECT_NAME}_db
    image: postgres:alpine
    volumes:
      - ./backend/sql/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./backend/sql/data.sql:/docker-entrypoint-initdb.d/2-data.sql
      - pg_data:/var/lib/postgresql/pg_data
    env_file:
      - .env
    ports:
      - "5432:5432"
    restart: always # ignored when deploying a stack in swarm mode or kubernetes
    deploy: # ignored by docker-compose
      restart_policy:
        condition: on-failure

  frontend:
    container_name: ${PROJECT_NAME}_frontend
    build: ./frontend
    command: yarn dev
    volumes:
      - ./frontend/:/usr/app
      - /usr/app/node_modules
    ports:
      - 8080:8080
    env_file:
      - .env  

  frontend_admin:
    container_name: ${PROJECT_NAME}_frontend_admin
    build: ./frontend_admin
    command: yarn dev
    volumes:
      - ./frontend_admin/:/usr/appadmin
      - /usr/appadmin/node_modules
    ports:
      - 8081:8081
      - 9527:9527
    env_file:
      - .env
    depends_on:
      - frontend


  backend:
    container_name: ${PROJECT_NAME}_backend
    build: ./backend
    ports:
      - 8000:8000
    env_file:
      - .env
    volumes:
      - ./backend:/opt/services/api/src
      - static_volume:/opt/services/backend/static # <-- bind the static volume
      - media_volume:/opt/services/backend/media  # <-- bind the media volume
    depends_on:
      - db
    command: bash -c "python manage.py makemigrations auth && python manage.py migrate auth && python manage.py generateschema > openapi-schema.yml && python manage.py collectstatic <<<yes && python manage.py makemigrations && python manage.py migrate --run-syncdb && gunicorn --chdir backend --bind :8000 backend.wsgi:application"


  nginx:
    container_name: ${PROJECT_NAME}_nginx
    image: nginx:latest
    env_file:
      - .env
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/opt/services/backend/static
      - media_volume:/opt/services/backend/media

  redis:
    container_name: ${PROJECT_NAME}_redis
    image: redis
    env_file:
      - .env

volumes:
  pg_data:
  nginx-logs:
  static_volume:  # <-- declare the static volume
  media_volume:  # <-- declare the media volume
  redis-data:

# -*- coding: utf-8 -*-
# Generated by Django 1.9.13 on 2018-08-30 19:39
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion
import redactor.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='Advantage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=140, null=True)),
                ('section_one', redactor.fields.RedactorField(blank=True, default='', null=True, verbose_name='Section One')),
                ('section_two', redactor.fields.RedactorField(blank=True, default='', null=True, verbose_name='Section Two')),
                ('section_three', redactor.fields.RedactorField(blank=True, default='', null=True, verbose_name='Section Three')),
            ],
            options={
                'verbose_name': 'Advantage',
                'verbose_name_plural': 'Advantage',
            },
        ),
        migrations.CreateModel(
            name='AdvantageLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=140, null=True)),
                ('link', models.CharField(blank=True, max_length=1500, null=True)),
                ('advantage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gui.Advantage')),
            ],
            options={
                'verbose_name': 'Advantage Link',
                'verbose_name_plural': 'Advantage Links',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=150)),
                ('time_published', models.DateTimeField(auto_now_add=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Article',
                'verbose_name_plural': 'Articles',
            },
        ),
        migrations.CreateModel(
            name='AskQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_published', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('full_name', models.CharField(blank=True, max_length=400, null=True)),
                ('email', models.CharField(blank=True, max_length=400, null=True)),
                ('subject', models.CharField(blank=True, max_length=400, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_agreed', models.NullBooleanField(default=False)),
                ('agreement', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Ask Question',
                'verbose_name_plural': 'Ask Step Five',
            },
        ),
        migrations.CreateModel(
            name='AskTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ask_intro', models.TextField(blank=True, null=True)),
                ('agreement', models.TextField(blank=True, null=True)),
                ('disclaimer', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Ask Question Template',
                'verbose_name_plural': 'Ask Question Templates',
            },
        ),
        migrations.CreateModel(
            name='ConsultationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=400, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, default=0, null=True)),
            ],
            options={
                'verbose_name': 'Consultation Type',
                'verbose_name_plural': 'Consultation Types',
            },
        ),
        migrations.CreateModel(
            name='ConsultTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consult_intro', models.TextField(blank=True, null=True)),
                ('agreement', models.TextField(blank=True, null=True)),
                ('disclaimer', models.TextField(blank=True, null=True)),
                ('consultation_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gui.ConsultationType')),
            ],
            options={
                'verbose_name': 'Online Consultation Template',
                'verbose_name_plural': 'Online Consultation  Templates',
            },
        ),
        migrations.CreateModel(
            name='ContactInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_published', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('statement', models.CharField(blank=True, max_length=450)),
                ('address1', models.CharField(blank=True, max_length=150)),
                ('address2', models.CharField(blank=True, max_length=150)),
                ('city', models.CharField(blank=True, max_length=150)),
                ('state', models.CharField(blank=True, max_length=150)),
                ('zipcode', models.CharField(blank=True, max_length=150)),
                ('tollfree', models.CharField(blank=True, max_length=150)),
                ('phone', models.CharField(blank=True, max_length=150)),
                ('fax', models.CharField(blank=True, max_length=150)),
                ('email', models.CharField(blank=True, max_length=150)),
                ('header', models.CharField(blank=True, max_length=150)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Contanct Info',
                'verbose_name_plural': 'Contact Info',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150)),
                ('code', models.CharField(blank=True, max_length=10)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_published', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('question', models.CharField(blank=True, max_length=1550)),
                ('note', models.CharField(blank=True, max_length=1550)),
                ('answer', redactor.fields.RedactorField(verbose_name='Answer')),
                ('nick', models.CharField(blank=True, max_length=150)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Frequently Asked Question',
                'verbose_name_plural': 'Frequently Asked Questions',
            },
        ),
        migrations.CreateModel(
            name='FrontBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('link', models.CharField(blank=True, max_length=1500, null=True)),
                ('body', models.CharField(blank=True, max_length=1500, null=True)),
            ],
            options={
                'verbose_name': 'Frontpage Block',
                'verbose_name_plural': 'Frontpage Blocks',
            },
        ),
        migrations.CreateModel(
            name='Logo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(upload_to='logos')),
                ('width', models.IntegerField(blank=True, default=0, null=True)),
                ('height', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'verbose_name': 'Logo',
                'verbose_name_plural': 'Logos',
            },
        ),
        migrations.CreateModel(
            name='LogoColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(blank=True, max_length=150, null=True)),
                ('code', models.CharField(blank=True, max_length=150)),
            ],
            options={
                'verbose_name': 'Logo Color',
                'verbose_name_plural': 'Logo Colors',
            },
        ),
        migrations.CreateModel(
            name='MileStone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=140, null=True)),
                ('year', models.CharField(blank=True, max_length=140, null=True)),
                ('body', models.CharField(blank=True, max_length=1500, null=True)),
            ],
            options={
                'verbose_name': 'Milestone',
                'verbose_name_plural': 'Milestones',
            },
        ),
        migrations.CreateModel(
            name='QualifyQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_published', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('html_id', models.CharField(blank=True, max_length=400, null=True)),
                ('question', models.CharField(blank=True, max_length=550, null=True)),
                ('answer', models.NullBooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='QualifyQuestionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_published', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('does_qualify', models.NullBooleanField(default=False)),
                ('date_avaluated', models.DateTimeField(auto_now_add=True)),
                ('action_taken', models.NullBooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Qualify Questionnaire',
                'verbose_name_plural': 'Qualify Questionnaires',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=150)),
                ('statement', models.CharField(blank=True, max_length=450)),
                ('time_published', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('description', redactor.fields.RedactorField(blank=True, default='', null=True, verbose_name='Description')),
                ('service', models.ImageField(upload_to='servces')),
                ('nick', models.CharField(blank=True, max_length=150)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_published', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('title', models.CharField(blank=True, max_length=150)),
                ('text', models.CharField(blank=True, max_length=450)),
                ('link', models.CharField(blank=True, max_length=350)),
                ('action', models.CharField(blank=True, max_length=500)),
                ('slide', models.ImageField(upload_to='slides')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Slide',
                'verbose_name_plural': 'Slide',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(blank=True, max_length=150)),
                ('code', models.CharField(blank=True, max_length=10)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'State',
                'verbose_name_plural': 'States',
            },
        ),
        migrations.AddField(
            model_name='qualifyquestionnaire',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gui.State'),
        ),
        migrations.AddField(
            model_name='qualifyquestionnaire',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='qualifyquestion',
            name='questionnaire',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gui.QualifyQuestionnaire'),
        ),
        migrations.AddField(
            model_name='qualifyquestion',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='logo',
            name='color',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logo_color', to='gui.LogoColor'),
        ),
    ]
